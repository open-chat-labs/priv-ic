type AttributeId = nat;
type TimestampMillis = nat64;

type Application =
    record {
        domain_name: text;
    };

type PhoneNumber = 
    record {
        country_code: nat16;
        number: text;
    };

type IndexedVerificationCode =
    record {
        index: nat64;
        value: VerificationCode;
    };

type VerificationCode =
    record {
        code: text;
        target: VerificationCodeTarget;
    };

type VerificationCodeTarget =
    variant {
        Phone: text;
        Email: text;
    };

type Identity = 
    record {
        email: EmailFacet;
        phone: PhoneFacet;
    };

type EmailFacet = 
    record {
        addresses: vec VerifiableEmailAddress;
    };

type PhoneFacet = 
    record {
        numbers: vec VerifiablePhoneNumber;
    };

type VerificationCodeStatus =
    variant {
        Sent: TimestampMillis;
        Expired: TimestampMillis;
        Verified: TimestampMillis;
    };

type VerifiableEmailAddress =
    record {
        id: AttributeId;
        status: VerificationCodeStatus;
        added: TimestampMillis;
        value: text;
    };

type VerifiablePhoneNumber =
    record {
        id: AttributeId;
        status: VerificationCodeStatus;
        added: TimestampMillis;
        value: PhoneNumber;
    };

type AppEmailFacet = 
    record {
        any_verified: bool;
        attributes: vec AppVerifiableEmailAddress;
    };

type AppPhoneFacet = 
    record {
        any_verified: bool;
        attributes: vec AppVerifiablePhoneNumber;
    };    

type AppVerifiableEmailAddress = 
    record {
        value: text;
        verified: bool;
    };
 
type AppVerifiablePhoneNumber = 
    record {
        value: PhoneNumber;
        verified: bool;
    };

type ProfileArgs =
    record {
    };

type ProfileResponse =
    variant {
        Success: ProfileSuccessResult;
        NotFound;
    };

type ProfileSuccessResult =
    record {
        identity: Identity;
        apps: vec Application;
    };

type VisibleAttributesArgs =
    record {
        app_domain_name: text;
    };

type VisibleAttributesResponse =
    variant {
        Success: VisibleAttributesSuccessResult;
        ApplicationNotRegistered;
    };

type VisibleAttributesSuccessResult =
    record {
        attributes: vec AttributeId;
    };

type AppProfileArgs =
    record {
    };

type AppProfileResponse =
    variant {
        Success: AppProfileSuccessResult;
        ApplicationNotRegistered;
        IdentityNotFound;
    };

type AppProfileSuccessResult =
    record {
        email: AppEmailFacet;
        phone: AppPhoneFacet;
    };

type SetVisibleAttributesArgs =
    record {
        app_domain_name: text;
        attributes: vec AttributeId;
    };

type SetVisibleAttributesResponse =
    variant {
        Success;
        ApplicationNotRegistered;
    };

type RegisterAttributeArgs =
    record {
        value: AttributeValue;
    };

type AttributeValue =
    variant {
        Email: text;
        Phone: PhoneNumber;
    };

type RegisterAttributeResponse =
    variant {
        Success: RegisterAttributeSuccessResult;
        AlreadyRegistered;
        InvalidValue;
    };

type RegisterAttributeSuccessResult =
    record {
        attribute_id: AttributeId;
    };

type SendVerificationCodeArgs =
    record {
        attribute_id: AttributeId;
    };

type SendVerificationCodeResponse =
    variant {
        Success;
        AlreadySent;
        AlreadyVerified;
        IdentityNotFound;
        AttributeNotFound;
        Unsupported;
    };

type ConfirmVerificationCodeArgs =
    record {
        attribute_id: AttributeId;
        verification_code: text;
    };

type ConfirmVerificationCodeResponse =
    variant {
        Success;
        VerificationCodeInvalid;
        VerificationCodeIncorrect;
        VerificationCodeExpired;
        AlreadyVerified;
        AttributeNotFound;
        IdentityNotFound;
    };

type RemoveAttributeArgs =
    record {
        attribute_id: AttributeId;
    };

type RemoveAttributeResponse =
    variant {
        Success;
        AttributeNotFound;
        IdentityNotFound;
    };

type VerificationCodesArgs =
    record {
        from_index: nat64;
    };

type VerificationCodesResponse =
    variant {
        Success: VerificationCodesSuccessResult;
        NotAuthorized;
    };

type VerificationCodesSuccessResult =
    record {
        verification_codes: vec IndexedVerificationCode;
    };

type RemoveVerificationCodesArgs =
    record {
        up_to_index: nat64;
    };

type RemoveVerificationCodesResponse =
    variant {
        Success;
        NotAuthorized;
    };

type RegisterApplicationArgs =
    record {
        app_domain_name: text;
    };

type RegisterApplicationResponse =
    variant {
        Success;
        AlreadyRegistered;
    };

type InitArgs = 
    record {
        verification_code_sender_principals: vec principal;
    };

service: (InitArgs) -> {
    // Your full profile consisting of your identity attributes and registered apps
    profile: (ProfileArgs) -> (ProfileResponse) query;

    // The list of attributes visible to the given app
    visible_attributes: (VisibleAttributesArgs) -> (VisibleAttributesResponse) query;

    // Set the list of attributes which should be visible to the given app
    set_visible_attributes: (SetVisibleAttributesArgs) -> (SetVisibleAttributesResponse);

    register_attribute: (RegisterAttributeArgs) -> (RegisterAttributeResponse);
    send_verification_code: (SendVerificationCodeArgs) -> (SendVerificationCodeResponse);
    confirm_verification_code: (ConfirmVerificationCodeArgs) -> (ConfirmVerificationCodeResponse);
    remove_attribute: (RemoveAttributeArgs) -> (RemoveAttributeResponse);

    register_application: (RegisterApplicationArgs) -> (RegisterApplicationResponse);

    // Called by an app to get the view of the profile visible to the given app
    app_profile: (AppProfileArgs) -> (AppProfileResponse) query;

    //// Verification code sender
    ext_verification_codes: (VerificationCodesArgs) -> (VerificationCodesResponse) query;
    ext_remove_verification_codes: (RemoveVerificationCodesArgs) -> (RemoveVerificationCodesResponse);
}